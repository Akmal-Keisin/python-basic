# # Python can manipulate text (represented by type str, so-called “strings”) as well as numbers. 
# # This includes characters “!”, words “rabbit”, names “Paris”, sentences “Got your back.”, etc. “Yay! :)”. 
# # They can be enclosed in single quotes ('...') or double quotes ("...") with the same result.

# print('Padang Rice') # single quotes
# print("Padang rice in the middle of night") # double quotes
# print("1941") # digits and numerals enclosed in quotes are also strings
# print("*") # also characters

# # To quote a quote, we need to “escape” it, by preceding it with \. 
# # Alternatively, we can use the other type of quotation marks:

# print('doesn\'t')
# print('"Absolutely," someone said')
# print("\"Absolutely,\" someone said")
# print('"Isn\'t," they said.')

# # Print special characters

# print("This character bellow is a break line special character")
# print("\n")
# print("\n")
# print("\n")
# print("Done")

# # If you don’t want characters prefaced by \ to be interpreted as special characters, 
# # you can use raw strings by adding an r before the first quote:

# print('C:\some\name') # here \n means newline!
# print(r'C:\some\name') # note the r before the quote

print(""" 
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⣦⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⡆⠀⠀⢀⣠⣶⣦⠀⠶⢲⣤⣤⣤⣤⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⢠⣴⣿⠟⠛⠁⢀⣠⣾⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⢴⣦⣤⣄⣀⠀⠀⠀⠀⠀⣀⣤⡶⠶⣶⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢶⣶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠐⠿⠋⢁⣠⣴⡿⠟⠁⠈⠁⣠⣤⣤⣤⣤⣤⣄⠀⢛⣆⠈⢹⣿⣿⣿⣿⡖⠀⠰⣾⠿⠛⢁⣄⡈⢛⣋⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣦⣄⠙⠿⠟⠛⠿⣿⣷⣶⣦⣤⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠇⠀⣰⣿⠿⠋⢀⣴⣾⠖⠀⠙⣟⣛⣋⣋⣉⣁⠀⠈⣿⠇⠀⣹⣿⣿⣧⠀⠲⠆⠀⢤⣶⡿⠛⢁⡘⠻⢿⡷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⣷⣶⣶⣶⣦⡀⠉⠛⠛⠛⠛⠛⠻⠿⣷⣶⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⡟⢀⣾⡟⣀⣀⠾⠛⠉⣠⣴⡶⠀⢈⣁⣠⣄⣤⣡⣤⣤⣤⣤⣴⣿⣟⢻⣿⣷⠀⠀⠛⠀⠀⣴⣾⣿⣿⠀⢸⣷⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠈⣿⣿⣿⣿⣿⣿⡁⠐⣶⣤⣀⡀⠀⠀⠀⠀⠈⠉⠙⠛⠿⣷⣦⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⠁⡘⢉⣴⡿⠃⢀⡐⠿⠛⢉⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠙⣿⣧⠀⢢⠀⠀⢠⣤⡴⢶⡄⢸⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠙⣿⣿⣿⣿⣿⣿⣄⠈⠛⠿⠿⠿⠗⠶⠶⣤⣤⣤⣄⣀⣀⠉⠙⠛⠿⠿⢶⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⡞⠁⣰⣿⣿⣿⠁⣴⣿⠇⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠘⣿⣦⡀⢰⣦⣤⣌⡀⠀⠀⢨⡏⠙⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠙⢿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠛⠿⠿⣿⣷⣶⣤⣌⡉⠛⠿⣷⣶⣤⣀⣀⣼⠿⠿⠛⠀⠀⠉⠉⠛⠁⣸⡟⠁⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⢸⠃⣾⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠉⢿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠙⠛⠷⠶⠄⠉⠙⠻⣿⣿⣶⣾⣿⣿⣿⣷⣦⠄⠀⠉⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⢰⡆⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⢿⣿⣿⣿⣿⠏⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠛⣿⡇⠀⣿⡟⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⣴⡇⠀⠀⠈⠛⠻⠿⠿⠛⠙⠻⣿⠟⠋⠀⠀⠀⠻⠃⣼⡟⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⢸⣿⡇⠀⠀⠀⠀⠀⠀⣴⣶⣶⣦⠀⠀⠀⠀⠀⠀⣰⣄⠈⠀⣴⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⡟⠙⠉⠀⣼⣿⣿⣦⣀⠀⢀⣀⣼⣿⣿⣿⣿⡷⠀⠀⢀⣤⣶⣿⣿⠀⠀⢿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣿⣿⣆⠀⠈⠻⣿⣿⣿⣿⣄⢻⣿⣿⣿⣿⣿⠟⠁⠀⠀⠛⣿⣿⣿⠋⢀⣤⠀⠻⣿⣿⣿⣿⣿⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢨⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣷⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⢿⣆⠠⣄⠈⠿⣿⣿⡿⠻⣿⣿⣿⣿⡏⠀⠀⠀⠀⣸⣿⠋⠀⠀⢿⣿⣷⣦⣈⣉⡉⠛⠛⠛⠛⠻⠿⣶⣶⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣦⡀⠁⠀⠙⠷⠀⠈⢀⣤⣾⣿⣿⣿⣿⣷⣴⣾⣶⣶⣿⣿⠀⠀⠀⠈⠙⠛⠛⠻⠟⠿⣿⣿⣿⣶⣦⣄⡀⠉⠙⠛⠿⢿⣶⣤⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⢠⣶⣶⣶⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠿⠿⠿⠂⢸⣶⣤⠟⠀⠈⠉⠉⠉⠙⠉⢉⡀⠉⠉⠙⠛⠻⠟⠀⠀⠀⠀⠀⠀⠀⣀⠀⠀⠀⠀⠉⠉⠛⠿⢿⣷⣦⣀⠀⠀⠈⠉⠛⠿⢿⣿⣿⣶⣦⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢻⣿⣿⣿⣿⣷⣤⣀⣀⣀⣈⡉⠛⢿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣶⣶⠀⣼⣿⡀⠀⠀⠀⠺⠟⠀⠿⠃⠻⢿⣾⣿⠗⠀⠆⠀⠀⠀⠀⠀⠀⠀⠠⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠻⠷⣤⣤⣀⣀⠀⠀⠉⠛⠻⣿⣿⣿⣿⣿⣷⣶⣤⣤⣄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠘⢿⣿⣧⠀⠀⠀⠀⢀⣀⠀⣀⣤⣤⣄⠀⠀⣠⣝⣛⠋⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣄⠀⠀⠀⠀⠀⠈⠙⠻⠿⣷⣦⣤⣄⡀⠉⠛⠻⢿⣿⣿⣿⡿⠿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠈⢻⣿⡆⠀⣰⣾⡿⠁⣴⣿⡟⢉⣿⠆⠘⠻⠻⠿⠏⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠐⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠿⣿⣿⣷⡄⠀⠙⠛⢁⣴⣾
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠈⢿⣷⡀⠙⢁⣠⣾⣿⡟⢀⣾⠟⠀⢾⣷⣶⡶⠀⣄⡈⠻⣿⣷⣧⡀⠀⠦⠀⡀⠀⠀⠹⣿⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣄⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣀⣤⣤⣴⣶⣿⣿⣿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⠟⠛⠁⣠⡀⠘⢿⣷⣄⣀⠈⠻⢿⡆⠸⠏⢠⣤⣤⣤⣄⡀⠠⣿⣿⣆⠈⠻⣿⣿⣿⣦⣀⣼⣀⣀⢀⣤⣀⣤⡀⠀⢀⣤⣶⣦⡄⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠁⠀⠀⠖⠀⠀⠉⠀⠀⠀⠀⣀⣀⣀⣤⣤⣴⣾⣿⣿⣿⣿⣿⣿⠿⠿⠿
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⠏⢀⣴⣿⡿⠋⣠⣄⡈⠙⠿⠷⣶⣤⣤⣤⣀⠉⠛⠻⠿⠿⠃⣰⣿⡿⠃⢰⣤⡈⠙⠻⠿⣿⣿⣿⣿⣿⣿⣿⡿⠀⣰⣿⣿⣿⣿⣷⣤⡀⢀⣀⡀⠀⠀⠀⢀⣀⣀⣄⣤⣤⣤⣴⣶⣶⣾⣿⣿⣿⣿⣿⣿⣿⠿⠿⠛⠛⠉⠉⠁⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠋⣠⣾⡿⠃⣠⣾⣿⣿⣿⣷⡦⠄⠈⠉⠛⠿⠿⠿⣷⣶⡶⠆⢀⣿⣿⣦⣀⠈⠛⠿⠷⠶⠤⢄⠠⣉⣉⣀⣉⣠⣤⣶⣿⠿⠛⠛⠛⠛⠛⠃⢐⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠟⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠈⣀⠀⠻⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠈⠒⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣷⣶⣶⣶⣤⡀⠀⠀⠀⠙⠋⠙⠋⠉⢀⣤⣶⣿⣾⣷⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠟⠛⠉⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡀⠀⠀⠉⠛⠿⣿⣿⣶⣤⣀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠛⠃⠀⠀⠀⠀⢸⣿⡆⢸⣿⣿⣿⡿⠋⢀⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠀⠀⠀⠀⠀⠀⠀⡐⢀⠂⡐⢈⠐⠈⡐⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⢠⣰⣿⡿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠟⠛⠻⠿⠿⠛⠛⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣄⡀⠀⠀⠀⣠⣴⣿⡟⠀⢸⣿⣿⣿⡇⠀⣾⣿⣿⠿⠛⠉⠁⠀⠀⣀⠠⣀⠂⡀⠀⠀⠀⢆⠐⡀⢂⠐⠠⠈⠐⡀⠐⡐⠂⠀⠀⠀⠁⠀⢀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠏⠀⠸⣿⣿⣿⣿⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣼⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣶⡆⠸⢿⠿⠟⣥⣄⠀⢻⣿⣿⠃⠈⠿⠟⠁⠀⠀⠀⠀⢆⠓⡄⠃⠄⠂⡄⠀⠀⠈⠆⡐⢀⠂⠌⠠⢁⠂⠄⡁⠠⢡⠀⠀⠀⠂⠌⠀⠄⡁
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠈⠻⢿⣿⣿⣿⣿⣷⣦⣤⣤⣄⣤⣠⣤⣤⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠈⠀⠀⠀⠀⣠⣿⣿⠇⠈⠉⠁⠀⠀⢀⢠⡐⢻⡄⠀⢘⡆⢣⢠⡉⠜⡰⠀⠀⠀⢀⠒⡀⠆⡈⠄⡁⢂⠐⠠⢀⠡⢒⠀⠀⠀⢈⠠⠁⢂⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣧⠀⠀⠀⠀⠀⠈⠙⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⣀⣀⣀⣀⣤⣾⣿⣿⠋⠀⠀⢠⡀⣤⣚⡼⣆⢧⣹⠆⠀⠸⣜⢠⠒⣌⢣⣑⠂⠀⠀⠀⢣⠜⡠⢁⠒⡈⠔⡨⢐⡀⢂⢣⠀⠀⠀⢀⠂⠌⠀⠄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⠿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠛⠿⠿⠿⠿⠟⠻⠛⣿⣿⣿⣿⣿⣿⣿⣿⠈⠙⠛⠿⣿⠿⠿⠿⠛⠛⠃⠀⣀⠀⠀⣀⣱⢊⣵⢃⢾⣸⡇⠀⠀⣏⢮⡝⢮⡖⣭⣒⠀⠀⠀⣯⢒⡥⢋⠰⣉⠦⡑⢢⠐⠡⢎⠀⠀⠀⢀⠂⠌⠐⡀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠘⢿⣿⣿⣷⣦⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⡿⠀⠀⣸⠖⣭⢾⣟⣾⣻⡅⠀⠀⡜⡮⣝⢧⣛⠶⣯⠃⠀⢈⣿⡓⣾⢩⣛⡴⢢⣁⠆⣌⠸⣌⠂⠀⠀⠠⠈⠄⠡⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡄⠀⠀⠙⠻⢿⣿⣿⣿⣿⣷⣶⣶⣶⣶⣶⣶⣶⣶⣿⣿⣿⠿⠟⢿⣿⣿⣿⣿⣿⣿⣿⡟⠿⣿⣷⣄⣀⣀⣀⣤⣴⣶⣿⡿⠁⠀⣰⣯⢼⣚⣿⣿⣯⣷⡂⠀⠀⣽⣗⣸⣳⣬⣟⣽⡁⠀⠠⣿⢹⡖⢯⡞⣵⡳⢮⡝⣦⠳⣌⠆⠀⠀⠠⠁⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣷⡄⠀⠀⠀⠀⠈⠙⠛⠛⠿⠿⠿⠿⠿⠿⠿⠿⠿⠟⠛⠁⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠙⠛⠿⠿⠿⠿⠿⠿⠟⠀⠀⣾⣿⣾⢿⣽⣿⣿⣿⣿⣗⠀⠀⢸⣿⣷⣟⡾⣽⣾⠄⠀⠀⣿⣮⣽⡶⣝⣲⣽⡳⡙⡐⠃⠀⠈⠀⠀⠀⠀⠆⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡟⢿⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣻⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⢠⣤⠀⢀⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⠀⠀⠸⣿⣿⣯⣿⣿⣿⠀⠀⢈⣿⣿⣿⣿⣿⣾⣧⣱⢶⡑⠂⠀⣀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣿⡇⠀⠈⠛⢿⣿⣷⣶⣤⣄⣀⣀⠀⡀⢀⣀⣀⣀⣠⣤⣶⣾⣿⣿⣟⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣤⣤⣤⣴⣾⣿⠃⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠐⣿⣿⣿⣿⣿⣿⠀⠀⢨⣿⡿⠻⠟⠿⠻⠿⢋⠂⣀⣸⠾⠮⠁⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣄⠀⠀⠀⠈⠙⠛⠿⠿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠛⠋⠀⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠉⠛⢿⣿⣿⣿⣿⣿⣿⠁⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠘⣿⣿⣿⣿⣿⣿⠀⠀⠈⠉⣀⣀⣄⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠁⠀⠹⣿⠀⢈⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠀⠠⣿⣿⣿⡿⠟⠉⠀⠀⠀⠾⠿⠟⡌⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⡿⢿⣿⣿⣶⣦⣤⣀⣀⣀⠀⣀⢀⣀⣀⠠⣤⣶⣾⣿⣿⠿⣿⣿⣿⣿⣿⢿⣿⣿⡟⠛⠷⣠⣄⣀⣀⣀⣠⣾⡟⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠻⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⡇⠈⠙⠛⠿⠿⠿⠿⠿⠿⠿⠟⠛⠛⠁⠀⣸⣿⡿⠋⢁⣀⡈⠛⢿⣿⠏⠀⠹⣿⣷⡀⠀⠈⠛⠿⣿⣿⣿⠋⠀⠸⠟⠋⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠃⠀⠀⠀⠀⠀⠶⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠈⠌⡑⢢⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⠟⠃⠀⣺⣿⣿⣿⠇⠀⠀⠀⠀⠀⠘⢿⣷⡀⠀⠀⠀⠀⠈⣴⠆⠀⠀⣠⣾⣿⡿⠛⠉⠈⠁⢀⠀⠀⠀⠀⡀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠁⠂⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣶⣤⣀⣀⣀⣀⣀⣤⣤⣶⡿⠟⠋⠁⠀⣠⣾⣿⣿⣿⣷⡆⠀⠀⠀⠀⠀⠀⠈⠻⢿⣦⣄⣀⣠⣾⡿⠀⢀⠾⠛⠛⠉⠀⠀⠦⡙⠌⠀⠀⠀⢀⠚⠀⠀⠀⠀⠁⠂⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠻⠻⠿⠛⠛⠋⠁⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠋⠛⠋⠀⠀⠀⠃⠄⡀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
""")

# String concatenation
print(3 * 'ura' + 'nium')

word = "py"
word = word + "thon"
print(word)

# Strings can be indexed (subscripted), with the first character having index 0. 
# There is no separate character type; a character is simply a string of size one:

print(word[0])

# Indices may also be negative numbers, to start counting from the right:

print(word[-1])

# In addition to indexing, slicing is also supported. 
# While indexing is used to obtain individual characters, slicing allows you to obtain a substring:

print(word[0:2])
print(word[0:2])

# Slice indices have useful defaults; 
# an omitted first index defaults to zero, 
# an omitted second index defaults to the size of the string being slice

print(word[:2]) # character from the beginning to position 2 (excluded)
print(word[4:]) # characters from position 4 (included) to the end
print(word[-2:]) # characters from the second-last (included) to the end

# Note how the start is always included, and the end always excluded. 
# This makes sure that s[:i] + s[i:] is always equal to s:
print(word[:2] + word[2:])
print(word[:4] + word[4:])


# One way to remember how slices work is to think of the indices as pointing between characters, 
# with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n, for example:
#  +---+---+---+---+---+---+
#  | P | y | t | h | o | n |
#  +---+---+---+---+---+---+
#  0   1   2   3   4   5   6
# -6  -5  -4  -3  -2  -1
# The first row of numbers gives the position of the indices 0…6 in the string; 
# the second row gives the corresponding negative indices. 
# The slice from i to j consists of all characters between the edges labeled i and j, respectively.

# For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds. 
# For example, the length of word[1:3] is 2.

# The built-in function len() returns the length of a string:
print(len(word)) # 6

# Python strings cannot be changed — they are immutable. 
# Therefore, assigning to an indexed position in the string results in an error:

word[0] = 'J' # Error
word[2:] = 'py' # Error

# If you need a different string, you should create a new one:
print('J' + word[1:])
print(word[:2] + 'py')
